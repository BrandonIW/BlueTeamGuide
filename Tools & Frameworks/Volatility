#----Capturing Memory
Live Systems:

- There are a number of tools that can be used to capture memory on a live system. For example:
1) FTK imager - https://accessdata.com/product-download/ftk-imager-version-4-2-0
2) Redline 
3) Dumpit.exe
4) wind32dd.exe/win64dd.exe

Offline & VMs: 

- Typically these tools output a .raw file. 
- Offline machines can have memory extracted, to come extent, via %SystemDrive%/hiberfil.sys file. This is the gibernation file containing a compressed memory image from the previous boot. MS Windows uses this to provide a faster boot time even when the system is fully shut down. 
- For VMs, we can often find memory in the data store of the hyervisor, and it can simply be copied/pasted., without disturbing the VM. 

Vmware - .vmem file
HyperV - .bin file
Parallels - .mem file
Virtualbox - .sav file


#----How To/Cmds/Examples etc
volatility -f <memory file> imageinfo -> Provides us with a high level summary of the memory sample. Often used to ID the OS, hardware architecture etc. Also gives us the suggested "PROFILE" to use when passing the image to other cmds in volitility. 

volatility -f <memory file> --profile=<profile> pslist -> Shows active processes running at the time of memory file creation

volatility -f <memory file> --profile=<profile> pstree -> Same as pslist but shows it in tree/heiarchical format 

volatility -f <memory file> --profile=<profile> netscan -> Shows active network connections at the time of memory file creation. I.e C2 server communications

volatility -f <memory file> --profile=<profile> netscan | grep -vi closed -> Filter out any closed ports. We only see open/list etc. 

volatility -f <memory file> --profile=<profile> malfind -D <Destination Directory> -> Finds "injected code" in memory, or what volatility suspects is injected code, and dumps it to a directory of our choice. 

volatility -f <memory file> --profile=<profile> dlllist -> lists all DLLs in mem. 

volatility -f <memory file>w --profile=<profile> --pid=PID dlldump -D <Destination Directory> -> Pull out DLLs being accessed by a specific PID/process. Often we want to select the suspicious process

volatility -f <memory file>w --profile=<profile> clipboard -> Extract contents of windows clipboard  

volatility -f <memory file>w --profile=<profile> sockets -> Listening TCP/UDP Sockets on the host

volatility -f <memory file>w --profile=<profile> psxview -> This is good for listing all the running processes on the system the memory image is taken from, AND comparing if that process can be seen from various different process gatherer's like pslist, psscan, etc. If we see a process appear in all but one (all are True except for one) that's kinda sus

volatility -f .\cridex.vmem --profile=<profile> shellbags -> Can get evidence regarding what files a user accessed. 

.\volatility.exe -f .\cridex.vmem --profile=WinXPSP3x86 connscan -> View TCP Sessions. NOT UDP 

.\volatility.exe -f .\cridex.vmem --profile=WinXPSP3x86 cmdline -> Command line cmds that are run when the process executed 

.\volatility.exe -f .\cridex.vmem --profile=WinXPSP3x86 procdump -p 1640 --dump-dir .  -> Download a specific file associated with a PID to a directory

.\volatility.exe -f .\cridex.vmem --profile=WinXPSP3x86 memdump -p 1640 --dump-dir .  -> Create a memory dump file. Can be later analyzed by "strings" tool/cmd to find printable strings in the dump. Grep for what you want, i.e. IP addresses, websites, keywords that you found earlier in the investigation

.\volatility.exe -f .\cridex.vmem --profile=WinXPSP3x86 printkey -K Software\Microsoft\Windows\CurrentVersion\Run -> Reach into registry and grab keys associated with particular registry path 
