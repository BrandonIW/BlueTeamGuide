#----Accessing & Reading Logs

Event Viewer (GUI-based application)
- Already familiar w/ this. Straight fwd

Wevtutil.exe (command-line tool)
- Cmdline version to query logs. Fairly straightforward but: wevtutil /? for more information. Some examples of cmds are as follows:

wevtutil qe Application /c:3 /rd:true /f:text --> Query the events in the Application Log. Read a max of 3 events, in reverse direction, and format the output as a human readable text

wevtutil qe Security /c:100 /f:text --> Query 100 events from Security log 


Get-WinEvent (PowerShell cmdlet)
- Pwershell tool to query logs. Pretty easy but can run Get-Help Get-WinEvent for some assistance. Examples are below

Get-WinEvent -LogName Application | Where-Object { $_.ProviderName -Match 'WLMS' }   #remmeber w/ pwrshell "$_" refers to a placeholder/variable for the currently selected variable/log. The "." in $_. is basically the same as Python's methods. We want to select the "ProviderName" method in our variable (the line of log) and see if it matches WLMS. $_. you'll see in pipes and filtering. 

Get-WinEvent -LogName Application | Where-Object { $_.ProviderName -Match 'VSS' }
- Find logs associated w/ a specific source

Get-WinEvent -LogName Security | Where-Object { $_.ID -Match '5379' }
- Find logs with a specific event ID

Get-WinEvent -LogName System | Where-Object { $_.LevelDisplayName -Match 'Error' } 
- Find error messages in System log

Get-WinEvent -LogName Application | Where-Object { $_.Message -Match 'FLAG' } 
- Might be useful for finding flags in logs

Get-WinEvent -Path C:\Windows\System32\winevt\Logs\System.evtx | Where-Object { $_.Message -Match 'driver' } 
- Same as above, but searching a specific evtx file provided for a keyword in the “Message” aspect of the log

Get-WinEvent -Path C:\Windows\System32\winevt\Logs\System.evtx | Where-Object { $_.Message -Match 'driver' -and $_.ID -Match 2 } 
Conditional logic to match on multiple criteria 
Can also use “-or” instead of “-and”

Get-WinEvent -Path C:\Windows\System32\winevt\Logs\System.evtx | Where-Object { $_.MachineName -Match 'PC1' } 
Filter by computer name 





#---- Hash Table Filters

Get-WinEvent -FilterHashtable @{
  LogName='Application'
  ProviderName='WLMS'
}

Filters for WLMS logs in the application log


Get-WinEvent -FilterHashtable @{
  Path='C:\Windows\System32\winevt\logs\System.evtx'
  ProviderName='Microsoft-Windows-DNS-Client'
  ID=’1014’
  UserID='S-1-5-20’
}
Filters for ‘Microsoft-Windows-DNS-Client’ logs within a specified log, with a specific EventID and UserID

Get-WinEvent -FilterHashtable @{
  Path='C:\Windows\System32\winevt\logs\System.evtx'
  ProviderName='Microsoft-Windows-DNS-Client'
  ID=’1014’
  UserID='S-1-5-20’
  StartTime=$(Get-Date).AddHours(-1)
}
Same as above but filters for logs from the last 1 hour


Get-WinEvent -FilterHashtable @{
  Path='C:\Windows\System32\winevt\logs\System.evtx'
  ProviderName='Microsoft-Windows-DNS-Client'
  ID=’1014’
  UserID='S-1-5-20’
  StartTime=$(Get-Date -Year 2022 -Day 11 -Month 1)
  EndTime=$(Get-Date -Year 2022 -Day 17 -Month 1)
}
Same as above but filters for lags between a time frame


- The above code is the same as the one-liner, but more efficent. It's a hash table we're we can define key/value pairs like a dict in python. Additional Hashtable values include:
LogName
ProviderName
Path
Keywords
ID
Level
StartTime
EndTime
UserID
Data

- Another Example:
Get-WinEvent -FilterHashtable @{
  LogName='Microsoft-Windows-PowerShell/Operational'
  ID=4104} | Select-Object -Property Message | Select-String -Pattern 'SecureString'
  
  
  
  
  
#----XPath Filtering
Win. Event Logs supports an XML Path-based language for finding and filtering logs. It looks kinda stupid but it's something like this:

XPath Query: *[System[(Level <= 3) and TimeCreated[timediff(@SystemTime) <= 86400000]]]

Honestly this seems useless, but regardless...we can use the XML View in Evnt Viewer to get help building a query w/ Xpaths. We can view an event's XML form, and work our way through parent > Child XML tags to create an appropriate Xpath query. To filter using Xpaths in Get-WinEvent, the cmd would look smth like:

Get-WinEvent -LogName Application -FilterXPath '<XPath Filter here>'
Get-WinEvent -LogName Application -FilterXPath '*/System/Provider[@Name="WLMS"]'
Get-WinEvent -LogName Security -FilterXPath '*/EventData/Data[@Name="TargetUserName"]="System"' -MaxEvents 1
Get-WinEvent -LogName Application -FilterXPath '*/System/EventID=101 and */System/Provider[@Name="WLMS"]'
Get-WinEvent -LogName Application -FilterXPath '*/System/Provider[@Name="WLMS"] and */System/TimeCreated[@Name="SystemTime"]="2020-12-15T01:09:08.940277500Z"'
Get-WinEvent -Path <PAth to custom evnt log file> -FilterXpath '<Xpath Query>' 

#----Event IDs
Some Events that may be of interest. Obviously not exhaustive. Mitre Att&ck can be a good place to look for IOCs WRT events for certain compromises

7045 - New Service Installed (System Log)
2004/2005/2006/2033/2009 - Firewall rule added/changed/deleted/Failed to Load 
4738/4728/4670 - Events related to changes on account objects and/or permissions.
1102/104 - Log has been cleared 
