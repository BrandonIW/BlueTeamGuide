#----Accessing & Reading Logs

Event Viewer (GUI-based application)
- Already familiar w/ this. Straight fwd

Wevtutil.exe (command-line tool)
- Cmdline version to query logs. Fairly straightforward but: wevtutil /? for more information. Some examples of cmds are as follows:

wevtutil qe Application /c:3 /rd:true /f:text --> Query the events in the Application Log. Read a max of 3 events, in reverse direction, and format the output as a human readable text

wevtutil qe Security /c:100 /f:text --> Query 100 events from Security log 


Get-WinEvent (PowerShell cmdlet)
- Pwershell tool to query logs. Pretty easy but can run Get-Help Get-WinEvent for some assistance. Examples are below

Get-WinEvent -LogName Application | Where-Object { $_.ProviderName -Match 'WLMS' }   #remmeber w/ pwrshell "$_" refers to a placeholder/variable for the currently selected variable/log. The "." in $_. is basically the same as Python's methods. We want to select the "ProviderName" method in our variable (the line of log) and see if it matches WLMS. $_. you'll see in pipes and filtering. 

Get-WinEvent -LogName Application | Where-Object { $_.ProviderName -Match 'VSS' }
- Find logs associated w/ a specific source

Get-WinEvent -LogName Security | Where-Object { $_.ID -Match '5379' }
- Find logs with a specific event ID

Get-WinEvent -LogName System | Where-Object { $_.LevelDisplayName -Match 'Error' } 
- Find error messages in System log

Get-WinEvent -LogName Application | Where-Object { $_.Message -Match 'FLAG' } 
- Might be useful for finding flags in logs

Get-WinEvent -Path C:\Windows\System32\winevt\Logs\System.evtx | Where-Object { $_.Message -Match 'driver' } 
- Same as above, but searching a specific evtx file provided for a keyword in the “Message” aspect of the log

Get-WinEvent -Path C:\Windows\System32\winevt\Logs\System.evtx | Where-Object { $_.Message -Match 'driver' -and $_.ID -Match 2 } 
Conditional logic to match on multiple criteria 
Can also use “-or” instead of “-and”

Get-WinEvent -Path C:\Windows\System32\winevt\Logs\System.evtx | Where-Object { $_.MachineName -Match 'PC1' } 
Filter by computer name 

Get-WinEvent -Path example.evtx | fl
Format list

Get-WinEvent -Path example.evtx | Out-GridView
Opens a new window with a grid view of the returned logs


#---- Hash Table Filters

Get-WinEvent -FilterHashtable @{
  LogName='Application'
  ProviderName='WLMS'
}

Filters for WLMS logs in the application log


Get-WinEvent -FilterHashtable @{
  Path='C:\Windows\System32\winevt\logs\System.evtx'
  ProviderName='Microsoft-Windows-DNS-Client'
  ID=’1014,7045’
  UserID='S-1-5-20’
}
Filters for ‘Microsoft-Windows-DNS-Client’ logs within a specified log, with a specific EventID and UserID

Get-WinEvent -FilterHashtable @{
  Path='C:\Windows\System32\winevt\logs\System.evtx'
  ProviderName='Microsoft-Windows-DNS-Client'
  ID=’1014’
  UserID='S-1-5-20’
  StartTime=$(Get-Date).AddHours(-1)
}
Same as above but filters for logs from the last 1 hour


Get-WinEvent -FilterHashtable @{
  Path='C:\Windows\System32\winevt\logs\System.evtx'
  ProviderName='Microsoft-Windows-DNS-Client'
  ID=’1014’
  UserID='S-1-5-20’
  StartTime=$(Get-Date -Year 2022 -Day 11 -Month 1)
  EndTime=$(Get-Date -Year 2022 -Day 17 -Month 1)
}
Same as above but filters for lags between a time frame

Get-WinEvent -FilterHashtable @{
  Path="system.evtx"
} | Where {$_.Message -like "*USB*"}
Search for events containing the string "USB"

Get-WinEvent -FilterHashtable @{
  Path="system.evtx"
} | findstr /i USB
Grep-style search

Get-WinEvent -FilterHashtable @{
  Path="application.evtx";
  level=2
}
Pulls all errors (level 2)

Get-WinEvent -FilterHashtable @{
  logname="MicrosoftWindows-Windows Defender/Operational
  id=1116,1117
 "}
Get all Defender logs w/ event ID for malware detection

- The above code is the same as the one-liner, but more efficent. It's a hash table we're we can define key/value pairs like a dict in python. Additional Hashtable values include:
LogName
ProviderName
Path
Keywords
ID
Level
StartTime
EndTime
UserID
Data

- Another Example:
Get-WinEvent -FilterHashtable @{
  LogName='Microsoft-Windows-PowerShell/Operational'
  ID=4104} | Select-Object -Property Message | Select-String -Pattern 'SecureString'
  
  
  
  
  
#----XPath Filtering
Win. Event Logs supports an XML Path-based language for finding and filtering logs. It looks kinda stupid but it's something like this:

XPath Query: *[System[(Level <= 3) and TimeCreated[timediff(@SystemTime) <= 86400000]]]

Honestly this seems useless, but regardless...we can use the XML View in Evnt Viewer to get help building a query w/ Xpaths. We can view an event's XML form, and work our way through parent > Child XML tags to create an appropriate Xpath query. To filter using Xpaths in Get-WinEvent, the cmd would look smth like:

Get-WinEvent -LogName Application -FilterXPath '<XPath Filter here>'
Get-WinEvent -LogName Application -FilterXPath '*/System/Provider[@Name="WLMS"]'
Get-WinEvent -LogName Security -FilterXPath '*/EventData/Data[@Name="TargetUserName"]="System"' -MaxEvents 1
Get-WinEvent -LogName Application -FilterXPath '*/System/EventID=101 and */System/Provider[@Name="WLMS"]'
Get-WinEvent -LogName Application -FilterXPath '*/System/Provider[@Name="WLMS"] and */System/TimeCreated[@Name="SystemTime"]="2020-12-15T01:09:08.940277500Z"'
Get-WinEvent -Path <PAth to custom evnt log file> -FilterXpath '<Xpath Query>' 




#----Event IDs
Some Events that may be of interest. Obviously not exhaustive. Mitre Att&ck can be a good place to look for IOCs WRT events for certain compromises

3 – Network Logon – File share access using SMB
4 – Batch Logon- Scheduled tasks – Non interactive
8 – Network logon creds in Cleartext

#--Scheduled Tasks--#
106 – Scheduled task Created
140 – Scheduled task Updated
141 – Scheduled task Deleted
200 – Scheduled task Executed
201 – Scheduled task Completed
4698 – Scheduled task Created
4699 – Scheduled task Deleted
4700 – Scheduled task Enabled
4701 – Scheduled task Disabled
4702 – Scheduled task Updated

 #--Sus. Services--#
7034 – Service crashed unexpectedly
7035 – Service sent a Start/Stop control
7036 – Service started or stopped
7040 – Start type changed [Boot|On Request|Disabled]
7045 – Service was installed on the system – Win2008R2+
4697 – Service was installed on the system – Security Log

#--Apps--#
1033 – Installation Completed – With Success/Failure status
1034 – Application removal completed – With Success/Failure status
11707 – Installation compeleted successfully
11708 – Installation operation failed
11724 – Applicatoin removal completed successfully
4688 – Security Log – New process created – includes execution path – Command line- cmd,PS etc
4689 – Security Log – Process Terminated
1001 – System/Application Log – Windows Error Reporting events.
1000-1002 – Application errors and hangs

#--Firewall--#
4950 - Firewall policy has changed
2003 - Firewall policy changed 

#--Wifi--#
11000 – Wireless network association started
8001 – Successful connection to wireless network
8002 – Failed connection to wireless network
8003 – Disconnect from wireless network

#--Powershell--#
4104 – Script contents
4105/4106 – Script Start/Stop

#--Event Log Clearing--#
1102 – Audit Log Cleared – Security Logs
104 – Audit Log Cleared – System Log

#--Users/Accounts etc.--#
4624 – Successful Logon;
4625 – Failed Logon;
4634/4647 – Successful Logoff; 4647 – User initiated.
4648 – Logon using explicit credentials – RunAs
4672 – Account logon with Admin rights – Special Logon
4720 – Account created.
4724 – Attempt to reset account’s password
4722 – User account enabled.
4724 – Attempt to reset account’s password
4728 – Member added to security-enabled global group
4732 – Member added to security-enabled local group
4735 – Security enabled local group changed.
4738 – User account was changed
4756 – Member added to security-enabled universal group

#--AD/Kerb Logon--#
4768 – Ticket Granting Ticket was granted
4771 – Pre-authentication Failed – Failed Logon
     0x6 Invalid Username
     0x12 Account locked, disabled or expired
     0x17 Password expired
     0x18 Password invalid
     0x25 Clock skew between server & client is too great
     
4776 – Successful/Failed account authentication
    0xC0000064 – Non-existent account username
    0xC000006A – Incorrect password – Username correct
    0xC000006F – Account not allowed to log on at this time.
    0xC0000070 – Account not allowed to log on from this computer.
    0xC0000071 – Expired password.
    0xC0000072 – Disabled account.
    0xC0000193 – Expired account.
    0xC0000234 – Account Locked

#--RDP--#
4778 – Session Connected/Reconnected
4779 – Session Disconnected

#--Net. Shares--#
5140 – Network Share was accessed – Sharename; Logon account; Remote IP address;

#--USB--#
6416 - External device recongized

#--Defender--#
1116 - Detected malware or unwanted software
1117 - Defender has taken action to protect machine from malware

#--Event Logs--#
1100 - The event logging service has shut down
1101 - Audit events have been dropped by the transport.
1102 - The audit log was cleared
1104 - The security Log is now full
1105 - Event log automatic backup
1108 - The event logging service encountered an error





